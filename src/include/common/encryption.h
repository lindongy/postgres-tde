#ifndef COMMON_ENCRYPTION_H
#define COMMON_ENCRYPTION_H

#include "port/pg_crc32c.h"

/*
 * Full database encryption key.
 *
 * The key of EVP_aes_256_cbc() cipher is 256 bits long.
 */
#define	ENCRYPTION_KEY_LENGTH	32
/* Key length in characters (two characters per hexadecimal digit) */
#define ENCRYPTION_KEY_CHARS	(ENCRYPTION_KEY_LENGTH * 2)

#define ENCRYPTION_KDF_NITER		1048576
#define	ENCRYPTION_KDF_SALT_LEN		sizeof(uint64)

#define KDF_PARAMS_FILE			"global/kdf_params"
#define KDF_PARAMS_FILE_SIZE	512

/* Executable to retrieve the encryption key. */
extern char *encryption_key_command;

/* Key to encrypt / decrypt data. */
extern unsigned char encryption_key[];

/*
 * Key derivation function.
 */
typedef enum KDFKind
{
	KDF_OPENSSL_PKCS5_PBKDF2_HMAC_SHA = 0
} KFDKind;

typedef struct KDFParamsPBKDF2
{
	unsigned long int niter;
	unsigned char salt[ENCRYPTION_KDF_SALT_LEN];
} KDFParamsPBKDF2;

/*
 * Parameters of the key derivation function.
 *
 * The parameters are generated by initdb and stored into a file, which is
 * then read during PG startup. This is similar to storing various settings in
 * pg_control. However an existing KDF file is read only, so it does not have
 * to be stored in shared memory.
 */
typedef struct KDFParamsData
{
	KFDKind		function;

	/*
	 * Function-specific parameters.
	 */
	union
	{
		KDFParamsPBKDF2 pbkdf2;
	}			data;

	/* CRC of all above ... MUST BE LAST! */
	pg_crc32c	crc;
} KDFParamsData;

extern KDFParamsData *KDFParams;

extern void derive_key_from_password(unsigned char *encryption_key,
									 const char *password, int len);
extern void run_encryption_key_command(char *data_dir);
extern void read_encryption_key_f(FILE *f);

#endif /* COMMON_ENCRYPTION_H */
