TDE_1.1.6
=========

Bug Fixes
---------

1. Fixed checking of page checksum in an encrypted cluster.

In a non-encrypted cluster, the page checksums are not computed for all-zero
pages. Since the encryption makes it difficult to check whether the decrypted
page will contain only zeroes, page checksums need to be treated specially in
an encrypted cluster. However, in some cases we incorrectly expected that an
all-zero page should have the checksum and reported error if it did not.

2. Avoid unnecessary encryption of empty pages when copying a relation.

The typical use case is ALTER TABLE ... SET TABLESPACE ...

3. Fixed encryption of a hint bit.

Change of a "hint bit" that indicates that all tuples on a page are visible to
all transactions now enforces re-encryption of the whole page, using a new
initialization vector (IV). That bit does not reveal actual user data, but the
current design is that the hint should be encrypted.

4. Do not omit the full-page-image (FPI) when setting hint bits.

In an encrypted cluster, change of a hint bit could advance the page LSN
without writhing the FPI on rare circumstances. If a torn-page write followed,
it'd be impossible to recover such a page.


TDE_1.1.5
=========

Bug Fixes
---------

1. Do not let the -o option break retrieval of configuration variables.

When pg_ctl runs postgres just to retrieve a value of a configuration variable
(GUC), it passes the -C option to postgres. In such case it should not pass
the -C options contained in the value of the pg_ctl's -o option.

2. Do not write the encryption key to the "variables file".

On Windows, the postmaster writes various parameters to a file from which a
new backend reads them. So far we also used this file to pass the encryption
key to the backend. Although the file is unlinked by the new backend shortly,
there used to be non-zero time window when the encryption key was on the
disk. Now we pass the key to the new backend via shared memory.

3. Do not allow a "key-only backend" to read the startup packet.

If the backend that is only launched to receive the encryption key tries to
read the startup packet, it can cause server crash. The problem was only
observed on Windows, probably due to slower startup of backends.

4. Fixed some Windows specific compiler errors and warnings.

5. Recognize the Windows line delimiter when reading the encryption key.

6. Do not let the logical replication plugin sneak-in wrong memory context.

The logical replication output plugin of pglogical 2.2.1 uses it's own memory
context, but sometimes it forgets to restore the original one. With our
implementation of temporary files this could lead to server crash.

7. Write data to the correct file offset during logical replication.

When the data does not fit into memory, the server writes it to disk. On
Windows we saw a crash because an incorrect offset was passed to pwrite(). (On
Linux this bug was shadowed be a known bug of pwrite(), see "man 2 pwrite",
while there's no such system call on Windows.)


TDE_1.1.4
=========

Bug Fixes
---------

Fixed configure.ac so it generates the correct configure script.


TDE_1.1.3
=========

Bug Fixes
---------

1. Fixed compilation when configured without the --with-openssl option.


TDE_1.1.2
=========

Bug Fixes
---------

1. Reset the statistics if the statistics file is corrupt.

The particular problem was an encrypted statistics file whose size was not a
whole multiple of BLCKSZ (typically 8 kB). Although there can be other kinds
of corruption, this one is very easy to identify and handle.

2. Fixed overflow during computation of temporary file read/write position.

Integer type may be insufficient if there the temporary file has too many
segments.

3. Eliminate the risk that the same initialization vector (IV) will be used to
encrypt different WAL blocks.

So far the layout of the IV was such that the internal counter of the OpenSSL
engine could overflow into the segment offset.


TDE_1.1.1
=========

Bug Fixes
---------

1. Make sure that the shared memory data cannot be written to disk.

If the dynamic_shared_memory_type configuration variable is set to "mmap", the
(unencrypted) shared memory data can be written to disk. This value is rather
unusual and the initdb utility should never set it, but in theory the DBA can
do. Our fix is to refuse startup if this value is set and if the instance is
encrypted at the same time.


2. Fixed processing of the "encryption key command".

If the command responsible for generation of the encryption key had to read
some information (typically the encryption password) from the standard input,
it did not work with initdb and pg_rewind. Obviously a regression of previous
changes.


TDE_1.1.0
=========

New Features
------------

1. Added an option to choose the encryption key length

Initially we only supported 128-bit keys. Now the user can use the --key-bits
command line option of the initdb application to specify the key length. The
accepted values are 128, 192 and 256.

2. Improved encryption of temporary files.

A new, unpredictable value of the initialization vector (IV) is now used for
each execution of encryption. This affects the use cases where (a part of) an
existing file is overwritten with new data.


TDE_1.0.0
============

The initial implementation of the TDE feature.
